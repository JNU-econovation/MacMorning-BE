version: '3.8'

services:
  db:
    image: mysql:8.0
    container_name: macmorning-mysql
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
      - ${MYSQL_DATA_PATH}:/var/lib/mysql
    environment:
      TZ: Asia/Seoul
      LANG: C.UTF-8
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
  
  redis:
    image: redis:latest
    container_name: macmorning-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  ingq-be:
    build:
      context: ./ingq
      dockerfile: Dockerfile.dev
    container_name: macmorning-be
    ports:
      - "${BE_PORT}:${BE_PORT}"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    restart: always

  ingq-ai:
    build:
      context: ./ai
      dockerfile: Dockerfile.dev
    container_name: macmorning-ai
    ports:
      - "${AI_PORT}:${AI_PORT}"
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    restart: always

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    container_name: macmorning-nginx
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
      - "${NGINX_SECURE_PORT}:${NGINX_SECURE_PORT}"
    volumes:
      - ${NGINX_LOG_PATH}:/var/log/nginx
      - ${NGINX_CONF_PATH}:/etc/nginx/nginx.conf
      - certbot_www:/var/www/certbot
      - certbot_letsencrypt:/etc/letsencrypt
    depends_on:
      - ingq-be
      - ingq-ai
    restart: unless-stopped
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: macmorning-certbot
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_letsencrypt:/etc/letsencrypt
    entrypoint: >
      /bin/sh -c 'trap exit TERM;
      if [ ! -f "/etc/letsencrypt/live/${BE_DOMAIN}/fullchain.pem" ]; then
        certbot certonly --webroot -w /var/www/certbot --email ${EMAIL} --agree-tos --no-eff-email -d ${BE_DOMAIN} --non-interactive;
      fi;
      
      if [ ! -f "/etc/letsencrypt/live/${AI_DOMAIN}/fullchain.pem" ]; then
        certbot certonly --webroot -w /var/www/certbot --email ${EMAIL} --agree-tos --no-eff-email -d ${AI_DOMAIN} --non-interactive;
      fi;
      exit 0;'
    depends_on:
      - nginx

  certbot-renew:
    image: certbot/certbot
    container_name: macmorning-certbot-renew
    volumes:
      - certbot_www:/var/www/certbot
      - certbot_letsencrypt:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; certbot renew; exit 0;'"

volumes:
  certbot_www:
  certbot_letsencrypt:
  redis_data: